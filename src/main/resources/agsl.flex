package com.mrtarantas.agsl.language.generated.lexer;import com.intellij.lexer.FlexLexer;import com.intellij.psi.tree.IElementType;import static com.intellij.psi.TokenType.BAD_CHARACTER;import static com.intellij.psi.TokenType.WHITE_SPACE;import static com.mrtarantas.agsl.language.generated.psi.AgslTypes.*;%%%public%class _AgslLexer%implements FlexLexer%function advance%type IElementType%unicode%{  private static final java.util.Map<String, IElementType> KEYWORDS = new java.util.HashMap<>();  static {    KEYWORDS.put("void", KW_VOID);    KEYWORDS.put("bool", KW_BOOL);    KEYWORDS.put("int",  KW_INT);    KEYWORDS.put("float", KW_FLOAT);    KEYWORDS.put("short", KW_SHORT);    KEYWORDS.put("half",  KW_HALF);    KEYWORDS.put("bvec2", KW_BVEC2); KEYWORDS.put("bvec3", KW_BVEC3); KEYWORDS.put("bvec4", KW_BVEC4);	KEYWORDS.put("bool2", KW_BOOL2); KEYWORDS.put("bool3", KW_BOOL3); KEYWORDS.put("bool4", KW_BOOL4);    KEYWORDS.put("ivec2", KW_IVEC2); KEYWORDS.put("ivec3", KW_IVEC3); KEYWORDS.put("ivec4", KW_IVEC4);	KEYWORDS.put("int2", KW_INT2); KEYWORDS.put("int3", KW_INT3); KEYWORDS.put("int4", KW_INT4);    KEYWORDS.put("vec2",  KW_VEC2);  KEYWORDS.put("vec3",  KW_VEC3);  KEYWORDS.put("vec4",  KW_VEC4);    KEYWORDS.put("float2", KW_FLOAT2); KEYWORDS.put("float3", KW_FLOAT3); KEYWORDS.put("float4", KW_FLOAT4);    KEYWORDS.put("short2", KW_SHORT2); KEYWORDS.put("short3", KW_SHORT3); KEYWORDS.put("short4", KW_SHORT4);    KEYWORDS.put("half2",  KW_HALF2);  KEYWORDS.put("half3",  KW_HALF3);  KEYWORDS.put("half4",  KW_HALF4);    KEYWORDS.put("mat2", KW_MAT2); KEYWORDS.put("mat3", KW_MAT3); KEYWORDS.put("mat4", KW_MAT4);    KEYWORDS.put("float2x2", KW_FLOAT2X2); KEYWORDS.put("float3x3", KW_FLOAT3X3); KEYWORDS.put("float4x4", KW_FLOAT4X4);    KEYWORDS.put("half2x2",  KW_HALF2X2);  KEYWORDS.put("half3x3",  KW_HALF3X3);  KEYWORDS.put("half4x4",  KW_HALF4X4);    KEYWORDS.put("shader",  KW_SHADER);    KEYWORDS.put("uniform", KW_UNIFORM);    KEYWORDS.put("const",   KW_CONST);    KEYWORDS.put("in",      KW_IN);    KEYWORDS.put("out",     KW_OUT);    KEYWORDS.put("inout",   KW_INOUT);    KEYWORDS.put("if", KW_IF); KEYWORDS.put("else", KW_ELSE);    KEYWORDS.put("while", KW_WHILE); KEYWORDS.put("do", KW_DO); KEYWORDS.put("for", KW_FOR);    KEYWORDS.put("break", KW_BREAK); KEYWORDS.put("continue", KW_CONTINUE);    KEYWORDS.put("return", KW_RETURN);    KEYWORDS.put("true", TRUE);    KEYWORDS.put("false", FALSE);  }%}LINE_TERMINATOR = (\r\n|[\n\r\u2028\u2029\u0085])   // CRLF, LF, CR, LS, PS, NELWHITESPACE     = ([ \t\f]+|{LINE_TERMINATOR})+      // spaces and/or line breaksDIGIT      = [0-9]ID_START   = [A-Za-z_]ID_PART    = [A-Za-z0-9_]LINE_COMMENT  = "//".*BLOCK_COMMENT = "/\\*([^*]|(\\*+[^*/]))*\\*/"FLOAT_TAIL   = ("."{DIGIT}+)?([eE][+-]?{DIGIT}+)?FLOAT_BODY   = ({DIGIT}+{FLOAT_TAIL})|("."{DIGIT}+([eE][+-]?{DIGIT}+)?)INT_BODY     = {DIGIT}+%%/* -------- Rules -------- */// spaces/comments{WHITESPACE}    { return WHITE_SPACE; }{LINE_COMMENT}  { return LINE_COMMENT; }{BLOCK_COMMENT} { return BLOCK_COMMENT; }{FLOAT_BODY} { return FLOAT_LITERAL; }{INT_BODY}   { return INT_LITERAL; }<YYINITIAL> {  "("      { return LPAREN; }  ")"      { return RPAREN; }  "{"      { return LBRACE; }  "}"      { return RBRACE; }  "["      { return LBRACK; }  "]"      { return RBRACK; }  ","      { return COMMA; }  "."      { return DOT; }  ";"      { return SEMI; }  "++"     { return PLUSPLUS; }  "--"     { return MINUSMINUS; }  "<="     { return LE; }  ">="     { return GE; }  "=="     { return EQEQ; }  "!="     { return NEQ; }  "&&"     { return ANDAND; }  "^^"     { return XORXOR; }  "||"     { return OROR; }  "+="     { return PLUS_EQ; }  "-="     { return MINUS_EQ; }  "*="     { return STAR_EQ; }  "/="     { return SLASH_EQ; }  "?"      { return QUESTION; }  ":"      { return COLON; }  "="      { return EQ; }  "<"      { return LT; }  ">"      { return GT; }  "+"      { return PLUS; }  "-"      { return MINUS; }  "*"      { return STAR; }  "/"      { return SLASH; }  "!"      { return EXCL; }}// Identifier{ID_START}{ID_PART}* {    String text = yytext().toString();    IElementType kw = KEYWORDS.get(text);    return kw != null ? kw : IDENT;}// Other[^] { return BAD_CHARACTER; }